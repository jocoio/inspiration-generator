{"version":3,"sources":["Image.js","palette-maker.js","App.js","serviceWorker.js","index.js"],"names":["colStyles","backgroundColor","minHight","borderRadius","boxShadow","Image","react_default","a","createElement","Col","className","md","style","alt","id","Component","getImage","image","palletecon","onload","pixels","bucketedPixelInfos","bucketsInPalette","container","firstChild","$","empty","histogramPaletteBuilder","HistogramPaletteBuilder","binPixels","_","take","buckets","console","log","PaletteTableWriter","drawPaletteTable","runHistogram","imgWidth","width","imgHeight","height","scale","canvasHeight","parseInt","canvasWidth","canvas","document","getContext","drawImage","x","y","pixel","getImageData","data","push","red","green","blue","mapPixels","setAttribute","ImageUtil","r","g","b","h","s","max","Math","min","l","d","number","hexString","toString","length","numberToPaddedHexString","color","colorString","pixelToHexString","totalRed","chain","map","p","sum","value","totalGreen","totalBlue","bucketsPerDimension","bucketSize","floor","_this","this","bucketMap","each","key","getKeyForPixel","values","sortBy","bucket","reverse","colors","index","pixelsInBucket","computeAverageColor","pixelGroups","paletteTableString","totalPixels","pg","averageColor","rgbToHsl","group","percent","getColorPreviewHtmlString","toFixed","append","show","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getImages","bind","assertThisInitialized","searchterm","getElementById","src","random","childNodes","Grid","Row","mdOffset","href","rel","target","FormControl","type","placeholder","Button","bsStyle","onClick","src_Image","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77329d9b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Col } from 'react-bootstrap';\n\nconst colStyles = {\n  backgroundColor: \"#eeeeee\",\n  minHight: '50px',\n  borderRadius: '5px',\n  boxShadow: '0 3px 6px rgba(0,0,0,0.16)'\n}\n\nclass Image extends Component {\n\n  render() {\n    return (\n      <Col className=\"un-container\" md={4}>\n        <img style={colStyles} className=\"un-image\" alt=\"unsplash\"></img>\n        <div id=\"histogram-output\">\n          <div id=\"histogram-palette\"></div>\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default Image;\n","import $ from 'jquery';\nimport _ from 'lodash';\n\n// var image = null;\n// var pixels = null;\n// var image = null;\nvar DIMENSION_MAX = 256;\n\n// Main function\nfunction getImage(image, palletecon) {\n\n  image.onload = function () {\n    runHistogram(palletecon, mapPixels(image));\n  };\n  // image.src = src;\n  image.setAttribute('crossOrigin', '');\n}\n\n// 2. Map image to collection of pixels\nfunction mapPixels(image) {\n  var pixels = [];\n  var imgWidth = image.width;\n  var imgHeight = image.height;\n  var maxDimension = imgWidth > imgHeight ? imgWidth : imgHeight;\n\n  var scale = maxDimension / 100;\n  var canvasHeight = parseInt(imgHeight / scale);\n  var canvasWidth = parseInt(imgWidth / scale);\n\n  var canvas = document.createElement('canvas');\n  canvas.width = canvasWidth;\n  canvas.height = canvasHeight;\n  canvas.getContext('2d').drawImage(image, 0, 0, canvasWidth, canvasHeight);\n\n\n  for (var x = 0; x < canvas.width; x++) {\n    for (var y = 0; y < canvas.height; y++) {\n      var pixel = canvas.getContext('2d').getImageData(x, y, 1, 1).data;\n      pixels.push({\n        red: pixel[0],\n        green: pixel[1],\n        blue: pixel[2]\n      });\n    }\n  }\n  return pixels;\n}\n\n// 3. run historgram and create palette with pixel data\nfunction runHistogram(palletecon, pixels) {\n  var bucketedPixelInfos = null;\n  var bucketsInPalette = null;\n  var histogramInputValue = 2;\n\n  removePaletteTable(palletecon.firstChild);\n\n  let histogramPaletteBuilder = new HistogramPaletteBuilder();\n  \n  bucketedPixelInfos = histogramPaletteBuilder.binPixels(pixels, histogramInputValue);\n  bucketsInPalette = _.take(bucketedPixelInfos.buckets, 10);\n  \n  console.log(palletecon);\n\n  PaletteTableWriter.drawPaletteTable(palletecon.firstChild, bucketsInPalette);\n}\n\nfunction removePaletteTable(container) {\n  $(container).empty();\n}\n\nclass ImageUtil {\n  static rgbToHsl(r, g, b) {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if (max === min) {\n      h = s = 0; // achromatic\n    } else {\n      var d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      switch (max) {\n        case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n        case g: h = (b - r) / d + 2; break;\n        case b: h = (r - g) / d + 4; break;\n        default: console.log(\"uh oh\");\n      }\n      h /= 6;\n    }\n\n    return [h, s, l];\n  }\n\n\n  static getPixelLuminance(pixel) {\n    return (pixel.red * 0.2126) + (pixel.green * 0.7152) + (pixel.blue * 0.0722);\n  }\n\n  static pixelToString(pixel) {\n    return \"r: \" + pixel.red + \", g: \" + pixel.green + \", b: \" + pixel.blue;\n  }\n\n  static numberToPaddedHexString(number) {\n    var hexString = parseInt(number).toString(16);\n    if (hexString.length === 1) {\n      return \"0\" + hexString;\n    }\n    return hexString\n  }\n\n  static pixelToHexString(pixel) {\n    var hexString = \"#\" +\n      ImageUtil.numberToPaddedHexString(pixel.red) +\n      ImageUtil.numberToPaddedHexString(pixel.green) +\n      ImageUtil.numberToPaddedHexString(pixel.blue);\n    return hexString;\n  }\n\n  static getColorPreviewHtmlString(color) {\n    var colorString = ImageUtil.pixelToHexString(color);\n    return \"<div class=\\\"colorPreview\\\" style=\\\"background:\" +\n      colorString +\n      \";height:40px;color:white;padding:10px\\\">\" +\n      colorString +\n      \"</div>\";\n  }\n\n  static computeAverageColor(pixels) {\n    var totalRed = _.chain(pixels)\n      .map(function (p) { return p.red; })\n      .sum()\n      .value();\n    var totalGreen = _.chain(pixels)\n      .map(function (p) { return p.green; })\n      .sum()\n      .value();\n    var totalBlue = _.chain(pixels)\n      .map(function (p) { return p.blue; })\n      .sum()\n      .value();\n    return {\n      red: (totalRed / pixels.length),\n      green: (totalGreen / pixels.length),\n      blue: (totalBlue / pixels.length)\n    };\n  }\n\n}\n\nclass HistogramPaletteBuilder {\n\n  getKeyForPixel(pixel, bucketsPerDimension) {\n    var bucketSize = DIMENSION_MAX / bucketsPerDimension;\n    var redBucket = Math.floor(pixel.red / bucketSize);\n    var greenBucket = Math.floor(pixel.green / bucketSize);\n    var blueBucket = Math.floor(pixel.blue / bucketSize);\n    var key = redBucket + \":\" + greenBucket + \":\" + blueBucket;\n    return key;\n  }\n\n  binPixels(pixels, bucketsPerDimension) {\n    let bucketMap = {};\n    _.each(pixels, (pixel) => {\n      let key = this.getKeyForPixel(pixel, bucketsPerDimension);\n      if (key in bucketMap) {\n        bucketMap[key].push(pixel);\n      } else {\n        bucketMap[key] = [pixel];\n      }\n    });\n\n    // sort buckets\n    let buckets = _.values(bucketMap);\n    let sortedBuckets = _.sortBy(buckets, (bucket) => { return bucket.length; }).reverse();\n\n    let bucketColors = _.map(pixels, (p, index) => {\n      let key = this.getKeyForPixel(p, bucketsPerDimension);\n      let pixelsInBucket = bucketMap[key];\n      let averageColor = ImageUtil.computeAverageColor(pixelsInBucket);\n      return averageColor;\n    });\n\n    return {\n      buckets: sortedBuckets,\n      colors: bucketColors\n    };\n  }\n}\n\nclass PaletteTableWriter {\n\n  static drawPaletteTable(container, pixelGroups) {\n    var paletteTableString = \"\";\n\n    // Table Header\n    paletteTableString += \"<tr>\";\n    paletteTableString += \"<th>Color Code</th>\";\n    paletteTableString += \"<th>Percent</th>\";\n    paletteTableString += \"</tr>\";\n\n    var totalPixels = _.chain(pixelGroups)\n      .map(function (b) { return b.length; })\n      .sum()\n      .value();\n\n    pixelGroups = _.sortBy(pixelGroups, function (pg) {\n      var averageColor = ImageUtil.computeAverageColor(pg);\n      var hsl = ImageUtil.rgbToHsl(averageColor.red, averageColor.green, averageColor.blue);\n      return hsl[0];\n    }).reverse();\n\n    _.each(pixelGroups, function (group) {\n      var averageColor = ImageUtil.computeAverageColor(group);\n      var percent = group.length / totalPixels;\n      paletteTableString += \"<tr>\";\n      paletteTableString += \"<td>\";\n      paletteTableString += ImageUtil.getColorPreviewHtmlString(averageColor);\n      paletteTableString += \"</td>\";\n      paletteTableString += \"<td>\";\n      paletteTableString += (percent * 100).toFixed(2);\n      paletteTableString += \"</td>\";\n      paletteTableString += \"</tr>\";\n    });\n    $(container).append(\"<table class=\\\"table\\\">\" + paletteTableString + \"</table\");\n    $(container).show();\n  }\n}\n\nexport { getImage };","import React, { Component } from 'react';\nimport { Grid, Row, Col, FormControl, Button } from 'react-bootstrap';\nimport Image from './Image';\nimport { getImage } from './palette-maker';\nimport './App.css';\nimport $ from 'jquery';\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.getImages = this.getImages.bind(this);\n  }\n\n  getImages() {\n    var searchterm = document.getElementById(\"term\").value;\n \n    $(\".un-container\")[0].firstChild.src = \"https://source.unsplash.com/random/?\" + searchterm + \"/\" + Math.random();\n    getImage($(\".un-container\")[0].firstChild, $(\".un-container\")[0].childNodes[1]);\n\n    $(\".un-container\")[1].firstChild.src = \"https://source.unsplash.com/random/?\" + searchterm + \"/\" + Math.random();\n    getImage($(\".un-container\")[1].firstChild, $(\".un-container\")[1].childNodes[1]);\n\n    $(\".un-container\")[2].firstChild.src = \"https://source.unsplash.com/random/?\" + searchterm + \"/\" + Math.random();\n    getImage($(\".un-container\")[2].firstChild, $(\".un-container\")[2].childNodes[1]);\n  }\n\n  render() {\n    return (\n      <div>\n        <Grid>\n          <Row>\n            <Col md={6} mdOffset={3} className=\"text-center\">\n              <h1>Inspiration Generator</h1>\n              <p>Images sourced from unsplash, palette algorithm from\n                <a href=\"https://github.com/mattnedrich/palette-maker\" rel=\"noopener noreferrer\" target=\"_blank\"> Matt Nedrich</a>\n              </p>\n            </Col>\n          </Row>\n          <Row>\n            <Col md={6} mdOffset={3} className=\"input-group\">\n              <FormControl\n                id=\"term\"\n                type=\"text\"\n                placeholder=\"love, nature, etc.\"\n              />\n              <div className=\"input-group-btn\">\n                <Button bsStyle=\"primary\" onClick={this.getImages} >Search</Button>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Image />\n            <Image />\n            <Image />\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}